generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id_user             String    @id @default(uuid())
  nombre              String
  nombre_comercial    String?
  email               String    @unique
  documento_tipo      String?
  documento_identidad String?   @unique
  fecha_nacimiento    DateTime?
  departamento        String?
  direccion           String?
  numero_telefono     String
  rol                 String
  password            String
  eliminado           Boolean   @default(false)
  fecha_registro      DateTime  @default(now())
  fecha_editado       DateTime?

  // Relación con lote
  lotes    Lote[]
  // Relación con muestra
  muestras Muestra[]
  // Relación con pedidos de cliente
  pedidos  Pedido[]  @relation("Cliente")

  pedidosCreados Pedido[] @relation("PedidoCreadoPor")

  pedidosCompletados Pedido[]      @relation("PedidoCompletadoPor")
  // Relación con Historial
  historial          Historial[]
  // Relacion con lotes Tostados
  lotesTostados      LoteTostado[]
  // Relacion con las Entregas
  envio              Envio[]
}

// DATOS ADICIONALES

model Variedad {
  id_variedad String @id @default(uuid())
  nombre      String
}

model Notas {
  id        String    @id @default(uuid())
  name      String
  color     String
  createdAt DateTime  @default(now())
  parentId  String?
  updatedAt DateTime? @updatedAt

  parent   Notas?  @relation("jerarquia", fields: [parentId], references: [id])
  children Notas[] @relation("jerarquia")
}

// INVENTARIADO DE CAFE

model Muestra {
  id_muestra         String             @id
  proveedor          String?
  nombre_muestra     String?
  productor          String?
  finca              String?
  distrito           String?            @map("region")
  departamento       String?
  peso               Float
  variedades         String[]
  proceso            String
  id_user            String?
  id_analisis        String?
  fecha_registro     DateTime           @default(now())
  completado         Boolean            @default(false)
  eliminado          Boolean            @default(false)
  // Relación con Usuario
  user               User?              @relation(fields: [id_user], references: [id_user])
  // Relación con Analisis
  analisis           Analisis?          @relation(fields: [id_analisis], references: [id_analisis])
  muestrasHistoricas Muestra_Analisis[]
}

model Lote {
  id_lote        String   @id
  proveedor      String?
  productor      String?
  finca          String?
  distrito       String?  @map("region")
  departamento   String?
  peso           Float
  peso_tostado   Float?
  variedades     String[]
  proceso        String
  tipo_lote      String
  clasificacion  String?
  id_user        String?
  id_analisis    String?
  fecha_registro DateTime @default(now())
  eliminado      Boolean  @default(false)

  // Relación con Usuario
  user            User?           @relation(fields: [id_user], references: [id_user])
  // Relación con Analisis
  analisis        Analisis?       @relation(fields: [id_analisis], references: [id_analisis])
  // pedidos que usan este lote como entrada
  pedidosOrigen   Pedido[]        @relation("LoteOrigen")
  // pedidos que generaron este lote como nuevo
  pedidosDestino  Pedido[]        @relation("LoteCreado")
  // los lotes tostados por lote
  LoteTostado     LoteTostado[]
  // los analisis del lote como historico
  lotesHistoricos Lote_Analisis[]
}

model LoteTostado {
  id_lote_tostado    String    @id
  id_lote            String
  fecha_tostado      DateTime
  perfil_tostado     String
  peso               Float
  entregado          DateTime?
  id_analisis_rapido String?   @unique
  id_user            String?
  fecha_registro     DateTime  @default(now())
  eliminado          Boolean   @default(false)

  analisisRapido AnalisisRapido? @relation(fields: [id_analisis_rapido], references: [id_analisis_rapido])
  lote           Lote            @relation(fields: [id_lote], references: [id_lote])
  tuestes        Tueste[]

  PedidoOrigen    Pedido?  @relation("PedidoLoteTostado")
  PedidoEmbolsado Pedido[] @relation("PedidoLoteTostadoOrigen")

  usuario User?   @relation(fields: [id_user], references: [id_user])
  envio   Envio[]

  inventarios Inventario[]
}

// HISTORIAL DE ACCIONES POR USUARIO

model Historial {
  id_historial   String   @id @default(uuid())
  entidad        String
  id_entidad     String
  id_user        String
  accion         String
  comentario     String
  fecha_registro DateTime @default(now())
  cambios        Json

  user User @relation(fields: [id_user], references: [id_user])
}

// PEDIDOS

model Pedido {
  id_pedido            String    @id @default(uuid())
  fecha_registro       DateTime  @default(now())
  tipo_pedido          String
  cantidad             Float
  estado_pedido        String    @default("Pendiente")
  id_user              String
  id_lote              String?
  id_nuevoLote         String?
  id_nuevoLote_tostado String?   @unique
  comentario           String?
  pesos                Float[]
  fecha_tueste         DateTime?
  tostadora            String?
  id_lote_tostado      String?
  gramaje              Int?
  molienda             Molienda?
  id_producto          String?
  creado_por_id        String?
  completado_por_id    String?
  fecha_completado     DateTime?
  eliminado            Boolean   @default(false)

  // Relación con Usuario como Cliente
  cliente           User         @relation("Cliente", fields: [id_user], references: [id_user])
  // Relación con lote original
  lote              Lote?        @relation("LoteOrigen", fields: [id_lote], references: [id_lote])
  // Relación con lote creado
  loteCreado        Lote?        @relation("LoteCreado", fields: [id_nuevoLote], references: [id_lote])
  // Relación con lote tostado creado
  loteTostado       LoteTostado? @relation("PedidoLoteTostado", fields: [id_nuevoLote_tostado], references: [id_lote_tostado])
  // Relación con lote tostado de origen 
  loteTostadoOrigen LoteTostado? @relation("PedidoLoteTostadoOrigen", fields: [id_lote_tostado], references: [id_lote_tostado])
  // Relación con Usuario como quien lo creó
  creadoPor         User?        @relation("PedidoCreadoPor", fields: [creado_por_id], references: [id_user])
  // Relación con Usuario como quien lo completóq
  completadoPor     User?        @relation("PedidoCompletadoPor", fields: [completado_por_id], references: [id_user])
  // Relación con los tuestes realizados para este pedido
  tueste            Tueste[]
  // Relacion con los productos en caso de maquila
  producto         Producto?    @relation(fields: [id_producto], references: [id_producto])
}

model Tueste {
  id_tueste                 String   @id @default(uuid())
  id_lote                   String
  id_cliente                String
  id_pedido                 String
  num_batch                 Int
  peso_entrada              Float
  tostadora                 String
  densidad                  Float
  humedad                   Float
  fecha_tueste              DateTime
  temperatura_entrada       Float?
  llama_inicial             Float?
  aire_inicial              Float?
  punto_no_retorno          Float?
  tiempo_despues_crack      Float?
  temperatura_crack         Float?
  temperatura_salida        Float?
  tiempo_total              Float?
  porcentaje_caramelizacion Float?
  desarrollo                Float?
  grados_desarrollo         Float?
  peso_salida               Float?
  merma                     Float?
  agtrom_comercial          Float?
  agtrom_gourmet            Float?
  estado_tueste             String   @default("Pendiente")
  id_lote_tostado           String?
  eliminado                 Boolean  @default(false)

  // Relación con Analisis Rapido
  loteTostado LoteTostado? @relation(fields: [id_lote_tostado], references: [id_lote_tostado])
  pedido      Pedido       @relation(fields: [id_pedido], references: [id_pedido])
}

// BOLSAS

enum Molienda {
  ENTERO
  MOLIENDA_FINA
  MOLIENDA_MEDIA
  MOLIENDA_GRUESA
  NINGUNO
}

model Categoria {
  id_categoria   String   @id
  nombre         String
  descripcion    String?
  fecha_registro DateTime @default(now())
  eliminado      Boolean  @default(false)

  productos Producto[]
}

model Producto {
  id_producto    String    @id
  nombre         String
  descripcion    String?
  id_categoria   String
  es_combo       Boolean   @default(false)
  activo         Boolean   @default(true)
  fecha_registro DateTime  @default(now())
  fecha_editado  DateTime?

  inventarios   Inventario[]
  categoria     Categoria?           @relation(fields: [id_categoria], references: [id_categoria])
  componentes   ProductoComponente[] @relation("ProductoCombo")
  parteDeCombos ProductoComponente[] @relation("ProductoParte")
  pedidos       Pedido[]
}

model Inventario {
  id_inventario   String    @id @default(uuid())
  id_producto     String
  id_lote_tostado String?
  cantidad        Int       @default(0)
  gramaje         Int?
  molienda        Molienda  @default(NINGUNO)
  unidad_medida   String?
  fecha_registro  DateTime  @default(now())
  fecha_editado   DateTime?

  producto    Producto     @relation(fields: [id_producto], references: [id_producto])
  loteTostado LoteTostado? @relation(fields: [id_lote_tostado], references: [id_lote_tostado])
}

model ProductoComponente {
  id_combo    String
  id_producto String
  cantidad    Int    @default(1)

  combo    Producto @relation("ProductoCombo", fields: [id_combo], references: [id_producto])
  producto Producto @relation("ProductoParte", fields: [id_producto], references: [id_producto])

  @@id([id_combo, id_producto])
}

// ENVIOS

enum OrigenEnvio {
  LOTE_TOSTADO
  CAFE_EMBOLSADO
  BOX_CAFE
}

enum ClasificacionEnvio {
  PARCIAL
  TOTAL
}

model Envio {
  id_envio        String             @id @default(uuid())
  origen          OrigenEnvio
  clasificacion   ClasificacionEnvio
  id_lote_tostado String
  id_cliente      String
  cantidad        Int
  comentario      String?
  fecha           DateTime           @default(now())
  eliminado       Boolean            @default(false)

  loteTostado LoteTostado @relation(fields: [id_lote_tostado], references: [id_lote_tostado])
  cliente     User        @relation(fields: [id_cliente], references: [id_user])
  ficha       FichaEnvio?
}

model FichaEnvio {
  id_ficha       String    @id @default(uuid())
  id_envio       String    @unique
  nombre         String
  celular        String
  direccion      String
  distrito       String
  dni            String?
  referencia     String?
  fecha_registro DateTime  @default(now())
  fecha_editado  DateTime?

  // Relación 1:1 con Envio
  envio Envio @relation(fields: [id_envio], references: [id_envio], onDelete: Cascade, onUpdate: NoAction)
}

// HISTORIAL DE ANALISIS X CAFE VERDE

model Lote_Analisis {
  id             String   @id @default(uuid())
  id_lote        String
  id_analisis    String
  fecha_agregado DateTime @default(now())

  lote     Lote     @relation(fields: [id_lote], references: [id_lote])
  analisis Analisis @relation(fields: [id_analisis], references: [id_analisis])

  @@unique([id_lote, id_analisis])
}

model Muestra_Analisis {
  id             String   @id @default(uuid())
  id_muestra     String
  id_analisis    String
  fecha_agregado DateTime @default(now())

  muestra  Muestra  @relation(fields: [id_muestra], references: [id_muestra])
  analisis Analisis @relation(fields: [id_analisis], references: [id_analisis])

  @@unique([id_muestra, id_analisis])
}

// ANALISIS

model Analisis {
  id_analisis          String   @id @default(uuid())
  fecha_registro       DateTime @default(now())
  analisisFisico_id    String?  @unique
  analisisSensorial_id String?  @unique
  analisisDefectos_id  String?  @unique
  comentario           String?

  eliminado Boolean @default(false)

  // Relación con Analisis Fisico
  analisisFisico    AnalisisFisico?    @relation(fields: [analisisFisico_id], references: [id_analisis_fisico])
  //  Relación con Analisis Sensorial
  analisisSensorial AnalisisSensorial? @relation(fields: [analisisSensorial_id], references: [id_analisis_sensorial])
  // Relación con Analisis Defectos
  analisisDefectos  AnalisisDefectos?  @relation(fields: [analisisDefectos_id], references: [id_analisis_defecto])

  Muestra            Muestra[]
  Lote               Lote[]
  lotesHistoricos    Lote_Analisis[]
  muestrasHistoricas Muestra_Analisis[]
}

model AnalisisFisico {
  id_analisis_fisico        String   @id @default(uuid())
  fecha_registro            DateTime @default(now())
  peso_muestra              Float
  peso_pergamino            Float
  wa                        Float
  temperatura_wa            Float
  humedad                   Float
  temperatura_humedad       Float
  densidad                  Float
  color_grano_verde         String
  olor                      String
  superior_malla_18         Float
  superior_malla_16         Float
  superior_malla_14         Float
  menor_malla_14            Float
  peso_defectos             Float
  quaquers                  Float?
  peso_muestra_tostada      Float?
  desarrollo                Float?
  porcentaje_caramelizacion Float?
  c_desarrollo              Float?
  comentario                String
  eliminado                 Boolean  @default(false)

  Analisis Analisis?
}

model AnalisisDefectos {
  id_analisis_defecto     String   @id @default(uuid())
  grano_negro             Int
  grano_agrio             Int
  grano_con_hongos        Int
  cereza_seca             Int
  materia_estrana         Int
  broca_severa            Int
  negro_parcial           Int
  agrio_parcial           Int
  pergamino               Int
  flotadores              Int
  inmaduro                Int
  averanado               Int
  conchas                 Int
  cascara_pulpa_seca      Int
  partido_mordido_cortado Int
  broca_leva              Int
  grado                   String
  fecha_registro          DateTime @default(now())
  eliminado               Boolean  @default(false)

  analisis Analisis?
}

model AnalisisSensorial {
  id_analisis_sensorial String   @id @default(uuid())
  fragancia_aroma       Float
  sabor                 Float
  sabor_residual        Float
  acidez                Float
  cuerpo                Float
  uniformidad           Float
  balance               Float
  taza_limpia           Float
  dulzor                Float
  puntaje_catador       Float
  taza_defecto_ligero   Float
  tazas_defecto_rechazo Float
  puntaje_taza          Float
  comentario            String
  fecha_registro        DateTime @default(now())

  eliminado Boolean @default(false)

  Analisis Analisis?
}

model AnalisisRapido {
  id_analisis_rapido String   @id @default(uuid())
  fecha_registro     DateTime @default(now())
  fragancia          String
  aroma              String
  floral             Boolean
  afrutado           Boolean
  bayas              Boolean
  frutos_secos       Boolean
  citricos           Boolean
  acido_fermentado   Boolean
  acido              Boolean
  fermentado         Boolean
  verde_vegetal      Boolean
  otros              Boolean
  quimico            Boolean
  rancio             Boolean
  tierra             Boolean
  papel              Boolean
  tostado            Boolean
  nueces_cacao       Boolean
  nueces             Boolean
  cocoa              Boolean
  especias           Boolean
  dulce              Boolean
  vainilla           Boolean
  azucar_morena      Boolean
  comentario         String?
  eliminado          Boolean  @default(false)

  loteTostado LoteTostado[]
}
